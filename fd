v#!/usr/bin/env bash

# Build a new fidion apk
# Params:
# 	- App flavor (see list of case-statements below).
#	- These must be prefixed with a '-' and can be combined
#	  (e.g. -bri to build a release apk and deploy it to the device).
#		b -> Build new apk
#		i -> Deploy apk to device
#		r -> Use release apk
#		d -> Uninstall existing apk
#		u -> Uplad apk to crashlytics
#		v -> Discard version code changes
#

flavors=()
ticket="invalid"
build=false
variant="debug"
deploy=false
upload=false
delete=false
openFolder=false
test=false
releaseNotes=""
targetApi="invalid"
check=false
nocheck=false
bundle=false
uploadBundle=false
incVersion=false

function writeReleaseNotes() {
	./gradlew -Pvalue="$releaseNotes" setReleaseNotes
}

function writeTargetApi() {
	./gradlew -Pvalue=$1 setTargetApi
}

function writeTicket() {
	./gradlew -Pvalue=$1 setTicket
}

function writeFlavor() {
	./gradlew -Pvalue=$1 setFlavor
}

if [[ $# == 0 ]]; then
	printf "No params passed.\n"
	exit 1
fi

for var in "$@"
do
	if [[ ${var:0:2} == "--" ]]; then
		if [[ ${var:2} =~ live|beta|admin ]]; then
			targetApi=${var:2}
			writeTargetApi ${var:2}
		elif [[ ${var:2} =~ nocheck ]]; then
    		printf "****** Won't run any verification\n";
			nocheck=true
		elif [[ ${var:2} =~ bundle ]]; then
    		printf "****** Will create AAB\n";
			bundle=true
		elif [[ ${var:2} =~ upload ]]; then
    		printf "****** Will upload AAB\n";
			uploadBundle=true
		elif [[ ${var:2} =~ v+ ]]; then
    		printf "****** Will increment version code\n";
			incVersion=true
		fi
	elif [[ ${var:0:1} == "-" ]]; then
		if [[ $var == *"b"* ]]; then
			build=true;
    		printf "****** Build new apk\n";
		fi
		if [[ $var == *"r"* ]]; then
			variant="release";
    		printf "****** Build variant: Release\n";
		fi
		if [[ $var == *"d"* ]]; then
	    	delete=true;
			printf "****** Delete existing apk \n";
		fi
		if [[ $var == *"i"* ]]; then
	    	deploy=true;
	    	printf "****** Install to device\n";
	    fi
		if [[ $var == *"u"* ]]; then
	    	upload=true;
			printf "****** Upload to firebase app distribution\n";
		fi
		if [[ $var == *"v"* ]]; then
	    	git checkout -- app/config/versioncode/versioncode.properties
			printf "****** Version code changes have been discarded\n";
		fi
		if [[ $var == *"o"* ]]; then
			openFolder=true
	        printf "****** Open apk folder when done\n";
	    fi
	    if [[ $var == *"t"* ]]; then
			test=true
	        printf "****** Append TEST-Suffix to filename\n";
	    fi
		if [[ $var == *"c"* ]]; then
			check=true
	        printf "****** Will run tests, checkstyle & spotbugs\n";
	    fi
	elif echo $var | egrep -q '^[0-9]+$'; then
		ticket=$var
		printf "****** Will commit build number changes using ticket #$ticket\n";
	elif [[ ${var:0:1} == "*" ]]; then
		releaseNotes=${var:1}

		if [[ $ticket == "invalid" ]]; then
			branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
			ticketNumber=${branch:7}

			if echo $ticketNumber | egrep -q '^[0-9]+$'; then
				ticket=$ticketNumber
			fi
		fi

		if [[ $ticket != "invalid" ]]; then
			suffix="Ticket: https://redmine.fidion.de/issues/$ticket"
		else
			suffix="Branch: $branch"
		fi

		releaseNotes="$releaseNotes --- $suffix"

		echo "Release notes: $releaseNotes"
	else
		flavors+=($var)
	fi
done

if [[ ${#flavors[@]} -eq 0 ]]; then
	if [[ $openFolder == true ]]; then
		openfolder ./app/apk;
	else
		printf "****** No flavor param found, aborting\n"
	fi

	exit 1;
fi

if [[ $build == true && $variant == "release" || $incVersion == true ]]; then
	./gradlew incrementVersionCode
fi

for i in ${!flavors[@]}; do

	flavor="${flavors[$i]}"
	printf "****** $flavor task started\n"

	case $flavor in
	fidion)
		appId="de.fcms.webapp.mywebapp"
		;;
	fcms_epaper)
		appId="de.fcms.epaper"
		;;
	fidion_kathrin)
		appId="de.fcms.webapp.kathrin.testapp"
		;;
	oon)
		appId="de.fcms.webapp.oon"
		;;
	bote)
		appId="com.soxes.bote"
		;;
	frankenpost)
		appId="de.fcms.webapp.fp"
		;;
	vaterland)
		appId="de.fcms.webapp.vaterland"
		;;
	in_sued)
		appId="de.fcms.webapp.is"
		;;
	np)
		appId="de.fcms.webapp.np"
		;;
	ka_news)
		appId="de.fcms.webapp.ka.news"
		;;
	sk_news)
		appId="de.fcms.webapp.sk_news"
		;;
	mp_news)
		appId="de.fcms.webapp.mp.news"
		;;
	fnp_news)
		appId="de.fcms.webapp.fnp.news"
		;;
	dk_epaper)
		appId="de.fcms.webapp.dk.epaper"
		;;
	me_epaper)
		appId="de.fcms.webapp.mainecho"
		;;
	me_news)
		appId="de.main_netz.ME_News"
		;;
	gaz)
		appId="de.fcms.webapp.mdv.gaz"
		;;
	aaz)
		appId="de.fcms.webapp.mdv.aaz"
		;;
	wz)
		appId="de.fcms.webapp.mdv.wz"
		;;
	esac

	Flavor="$(tr '[:lower:]' '[:upper:]' <<< ${flavor:0:1})${flavor:1}"
	Variant="$(tr '[:lower:]' '[:upper:]' <<< ${variant:0:1})${variant:1}"

	if [[ ( $upload == true || $check == true ) && $nocheck == false ]]; then
		verified=false;
		./gradlew test${Flavor}${Variant}Unittest checkstyle check${Flavor}${Variant}DuplicateClasses && verified=true;
		if [[ $verified == false ]]; then
			exit 1;
		fi
	fi

	if [[ $build == true || $bundle == true ]]; then

		if [[ $targetApi == "invalid" ]]; then
			writeTargetApi "live"
		fi

		if [[ $ticket != "invalid" ]]; then
			writeTicket $ticket
		else
			writeTicket ""
		fi

		if [[ $variant == "release" || $bundle == true ]]; then
			writeFlavor $flavor
			writeReleaseNotes
		fi

		if [[ $build == true ]]; then
			./gradlew --project-prop appId=$appId clean assemble$Flavor$Variant

			if [[ $variant == "release" ]]; then
				echo Copying ./app/build/outputs/apk/$flavor/release/*.apk to ./app/apk/
				cp ./app/build/outputs/apk/$flavor/release/*.apk ./app/apk/
			fi
		fi
	fi

	if [[ $delete == true ]]; then
		echo Uninstalling $Flavor
		./gradlew uninstall${Flavor}Release uninstall${Flavor}Debug
	fi

	if [[ $deploy == true ]]; then
		echo Installing $Flavor $Variant
		./gradlew install$Flavor$Variant
	fi

	if [[ $upload == true ]]; then
		if [[ $releaseNotes != "" && $build == false ]]; then
			writeReleaseNotes
		fi

		echo Distributing ${Flavor}Release to firebase app distribution.
		./gradlew appDistributionUpload${Flavor}Release
		echo Done.
	fi

	if [[ $bundle == true ]]; then

		echo Creating ${Flavor}Release AAB.
		./gradlew bundle${Flavor}Release

		echo Copying ./app/build/outputs/apk/$flavor/release/*.apk to ./app/apk/
		if [[ $uploadBundle == true ]]; then
			mkdir -p /home/simon/Dropbox/fidion/${flavor};
			cp ./app/build/outputs/bundle/${flavor}Release/*.aab /home/simon/Dropbox/fidion/${flavor}
		fi
		mv ./app/build/outputs/bundle/${flavor}Release/*.aab ./app/apk/
		echo Done.

	fi

done

if [[ $openFolder == true ]]; then
	openfolder ./app/apk;
fi
